# Installation 
Clone the repository, and type `make` in the folder.
It will make two executable programs: 1) grader, and 2) inserter. 

1) grader: this is for programming assignments. 

2) inserter: this is for inserting grades with a student list. 

# Configuration
Before using `grader`, you need to configure `./config` properly. 
In the configuration, you should set the following variables:
    * list_path: the path for a student id list. The file should be in csv. 
        - ex) list_path     ./students/students.csv (id,name\n)
    * package: the package name to be executed in PA. 
        - ex) ds.test.Main

Note that you do not need to re-make after modifying the configuration. 

# Structure
You should follow the folder sturucture for `grader` to run it properly. 
The folder structure is represented as follows:

PA/
└── PA_00 : 00 is the programming assignment id
    ├── diff      : folder for diff result files
    ├── input     : folder for input files
    ├── jars      : folder for jar files
    ├── log.csv   : final result file
    ├── output    : folder for output files
    └── result    : folrder for result files generated by users' jar files

First of all, you should prepare your own input and output files in 'PA/PA_00/input, PA/PA_00/output'.
The name formats of input and output are as follows:

    * Input: input01, input02, ...
    * Output: output01, output02, ...

Note that `grader` is allowed to grade 10 input files, i.e., you should prepare 10 input and output files. 
To modify the number of test cases, please change `int nCase` in `grader.cpp`, and re-build it. 
Each input file will be assigned 10 points if the output of a user is correct.

You need to locate jar files into 'PA/PA_00/jars'. 
The name foramt of jar is as follows:

    * Jar: PA_00_2015-12345.jar 
    * Note that '00' is the programming assignment id. 

Please be careful to prepare the jar files. 
If a jar file does not follow the name format, the program will miss grading the file although a user actually sumitted it. 
